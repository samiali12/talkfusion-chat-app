// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  seenMessages     SeenMessages[]
  userConversation UserConversation[]

  account Account[]
  message Message[]
}

model Conversation {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?
  isGroup       Boolean?

  messageId String    @default(uuid())
  messages  Message[]

  userConversation UserConversation[]
}

// junction table for user and conversation
model UserConversation {
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @default(uuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @default(uuid())

  @@id([userId, conversationId])
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @default(uuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @default(uuid())
  access_token      String? @default(uuid())
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @default(uuid())
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Message {
  id          String   @id @default(uuid())
  receiver    String?
  messageBody String?
  createdAt   DateTime @default(now())

  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @default(uuid())

  senderName User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String @default(uuid())

  seenMessage SeenMessages[]
}

// junction table for Message 
model SeenMessages {
  id        String @id @default(uuid())
  userID    String @default(uuid())
  messageID String @default(uuid())

  user    User    @relation(fields: [userID], references: [id])
  message Message @relation(fields: [messageID], references: [id])
}
